2020-2_ARQ1_RCR_006

Álgebra de Boole

1.) Simplificação de expressões

                     SoP    SoP
m mintermos  x y     xor    xnor
0   x'.y'    0 0     0       1
1   x'.y     0 1     1       0
2   x .y'    1 0     1       0
3   x .y     1 1     0       1

                   Formas canônicas
xor : SoP(1,2)  =    x'.y  + x .y'
xnor: SoP(0,3)  =    x'.y' + x .y

2.) Distância Hamming

dH (0,1) = 1 -> diferença apenas em um   bit  (0)
dH (1,2) = 2 -> diferença apenas em dois bits (0,1)
dH (2,3) = 1 -> diferença apenas em um   bit  (0)
dH (0,3) = 2 -> diferença apenas em dois bit  (0,1)

3.) Código de Gray

Distância unitária

dH (0,1) = { 00, 01 } = 0_ 
dH (2,3) = { 10, 11 } = 1_ 


Código de Gray -> dH = 1

            SoP    SoP
m   x y     xor    xnor
0   0 0     0       1
1   0 1     1       0
3   1 1     0       1  <-alteração de linha
2   1 0     1       0  <-alteração de linha

Técnica do espelhamento 
para geração do código de Gray
para 2 variáveis

 0    0    00
 1    1    01
___  ___  ____

      1    11
      0    10
      
Técnica do espelhamento 
para geração do código de Gray
para 3 variáveis

 00    000
 01    001
 11    011
 10    010
____  _____

 10    110
 11    111
 01    101
 00    100

Técnica do espelhamento 
para geração do código de Gray
para 4 variáveis
 
  000      0000
  001      0001
  011      0011
  010      0010
  110      0110
  111      0111
  101      0101
  100      0100
 _____    ______
 
  100      1100
  101      1101
  111      1111
  110      1110
  010      1010
  011      1011
  001      1001
  000      1000

3.) Exemplos

Exemplo 1:

      SoP SoP
m x y  s1  s0
0 0 0  0   0 
1 0 1  0   1
2 1 0  0   1
3 1 1  1   0

      SoP SoP
m x y  s1  s0
0 0 0  0   0 
1 0 1  0   1
3 1 1  1   0  <- reordenação segundo
2 1 0  0   1  <- o código de Gray

Exemplo 2:

          SoP SoP                SoP SoP
m x y z   s1  s0       m x y z   s1  s0
0 0 0 0 = 0   0        0 0+0+0 = 0   0 
1 0 0 1 = 0   1        1 0+0+1 = 0   1 
2 0 1 0 = 0   1        2 0+1+0 = 0   1 
3 0 1 1 = 1   0        3 0+1+1 = 1   0 
4 1 0 0 = 0   1        4 1+0+0 = 0   1 
5 1 0 1 = 1   0        5 1+0+1 = 1   0 
6 1 1 0 = 1   0        6 1+1+0 = 1   0 
7 1 1 1 = 1   1        7 1+1+1 = 1   1 

                             Formas canônicas
                       DNF - Disjunctive Normal Forms
                       3         5         6         7  
s1 = SoP(3,5,6,7) = x'.y .z + x .y'.z  + x.y .z' + x.y.z

                       1         2         4         7
s0 = SoP(1,2,4,7) = x'.y'.z + x'.y .z' + x.y'.z' + x.y.z


xy\z  0   1
00   (0) (1)     x\yz  00  01  11  10
01   (2) (3)     0     (0) (1) (3) (2)
11   (6) (7)     1     (4) (5) (7) (6)
10   (4) (5)

s1
xy\z  0   1                          
00               x\yz   00 01  11  10
01        1      0              1    
11    1   1      1          1   1   1
10        1                          

dH = 1 -> (a.b + a.b') ou (a'.b + a.b)

Tautologia: 
0+1 = 1
1+0 = 1
x+x'= 1

Contradição:
0.1 = 0
1.0 = 0
x.x'= 0

                         x y z 
G1(3,7) = G1(011, 111) = _ 1 1 = y.z
        = x'.y.z + x.y.z
        = (x'+ x).y.z
        =    1   .y.z
        = y.z       

G2(5,7) = G2(101, 111) = 1 _ 1 = x.z
        = x.y'.z + x.y.z = x.z.y' + x.z.y
        = x.z.(y'+ y)
        = x.z.   1
        = x.z

G3(6,7) = G3(110, 111) = 1 1 _ = x.y
        = x.y.z' + x.y.z
        = x.y.(z'+ z)
        = x.y.   1
        = x.y

s1 = SoP(3,5,6,7) = G1(3,7)+G2(5,7)+G3(6,7)
                  =  _11   + 1_1   +  11_
                  =   y.z  + x.z   +  x.y
                  =   x.y  + x.z   +  y.z
                       Forma simplicada
                      XY   +  XZ   +  YZ
 
dH = 2

G4(5,6) = G4(101, 110) = 1 _ _ 
G5(3,6) = G5(011, 110) = _ 1 _
    
Por MAXTERMOS

SoP (3,5,6,7)
PoS (0,1,2,4)

S1
XY\Z  0   1                          
00    0   0      X\YZ  00  01  11  10
01    0          0      0   0       0
11               1      0         
10    0                              

                             Formas canônicas
                       CNF - Conjunctive Normal Forms
                       0       1        2         4  
S1 = PoS(0,1,2,4) = (X+Y+Z).(X+Y+Z').(X+Y'+Z).(X'+Y+Z)

                         XYZ
G1(0,1) = G1(000, 001) = 00_ = ( X +Y )
G2(0,2) = G2(000, 010) = 0_0 = ( X +Z )
G3(0,4) = G3(000, 100) = _00 = ( Y +Z )

PoS (0,1,2,4) = G1.G2.G3 = (X+Y).(X+Z).(Y+Z)

 X+Y         -> G1
 X+Z         -> G2
______________
   XZ +YZ
 XX + XY
______________
XX+XY+XZ+YZ
X.1+X.Y+X.Z+YZ
X.(1+Y+Z)+YZ
X.   1   +YZ
X        +YZ

X+YZ
Y+Z
_____________
XZ+Y.Z.Z
XY+Y.Y.Z
_____________
XZ+YZ+XY+YZ
XZ+XY+YZ+YZ
XZ+XY+(YZ+YZ), fazendo k=YZ
XZ+XY+(k + k)
XZ+XY+   k
XZ+XY+   YZ
XY+XZ+   YZ

Forma simplificada
equivalente à dos mintermos

s1 =   x.y  + x.z   +  y.z
S1 =   X.Y  + X.Z   +  Y.Z

                      
Princípios para a aplicação do método: 

Existência de termos adjacentes ( AB+AB')

A menor quantidade de grupos para se obter
a maior quantidade de termos vizinhos.

 
Exemplo 3:
 
s0
xy\z  0   1
00        1
01    1     
11        1
10    1    

OBS.: Não há simplificação por esse método.
      Não há valores adjacentes (vizinhos)
      na horizontal ou na vertical.
      
Outros

Simplificação de grupo de 4 termos:

 0000  0010   00_0
 1000  1010   10_0

 00_0  10_0   _0_0  <-
 
 0000  1000   _000
 0010  1010   _010
 
 _000  _010   _0_0  <-

Leitura de tabela   ->    Algoritmo

          SoP SoP
m x y z   s1  s0 
0 0 0 0 = 0   0  
1 0 0 1 = 0   1  
2 0 1 0 = 0   1  
3 0 1 1 = 1   0  
         AND XOR
         
4 1 0 0 = 0   1  
5 1 0 1 = 1   0  
6 1 1 0 = 1   0  
7 1 1 1 = 1   1 
         OR  XNOR
 
if ( x )
{ s1 = or (y,z); s0=xnor(y,z); }
else
{ s1 = and(y,z); s0=xor(y,z);  }


