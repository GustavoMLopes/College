2020-2_ARQ1_RCR_010

Máquinas de Estados Finitos
(FSM - Finite State Machines)

Principais tipos

1. Autômato finito
2. Autômato de Mealy
3. Autômato de Moore 
4. Autômato de Pilha (Pushdown Automata)
5. Máquina de Turing
 __________________________________
|  ______________________________  |
| |  __________________________  | |
| | |   ____________________   | | |
| | |  |                    |  | | |
| | |  |Lógica  combinatória|  | | |
| | |  |____________________|  | | |
| | |Máquina de estados finitos| | |
| | |__________________________| | |
| |      Autômato de pilha       | |
| |______________________________| |
|        Máquina de Turing         |
|__________________________________|

Usos

Reconhecedores
  Mealy
  Moore
Classificadores
Transdutores
Sequenciadores 


Aplicações em software

Programação orientada para autômatos   (automata-based programming)
Programação orientada por  eventos     (event-driven finite-state machine)
Máquinas virtuais                      (virtual finite-state machines)
Padrões de projeto baseados em estados (state design pattern)
Compiladores - analisador léxico


Exemplos de máquinas de estados finitos ( Finite State Machines - FSM )

2. Mealy (resposta dependente da entrada)

   Exemplo:

   Reconhecedor de sequência (1101):

   Diagrama de estados

  entrada saída
         0:0                         1:0
        ---                         ---
        | |                         | |
        V |    1:0           1:0    V |    0:0           1:1
       estado  --->  estado  --->  estado  --->  estado  ---> estado
       inicial         (1)          (2)           (3)         final
        ^               |                          |
        |               |                          |
        -------- <------------------ <--------------
        0:0           0:0                        0:0

   entrada: 000111011011001101000
   saída  : 000000010000000000000


   Reconhecedor de sequências múltiplas (1101_1101), sem interseção:

   Diagrama de estados

   entrada saída
        0:0                         1:0
        ---                         ---
        | |                         | |
        V |    1:0           1:0    V |    0:0           1:1
       estado  --->  estado  --->  estado  --->  estado  ---
       inicial         (1)          (2)           (3)      |
        ^               |                          |       |
        |               |                          |       |
        -------- <------------------ <---------------- <----
        0:0           0:0                        0:0        

   entrada: 000111011011001101000
   saída  : 000000010000000001000

   Tabela de estados
  
   Estado   Próximo / Saída
   Atual       0        1  
     0        0:0      1:0 
     1        0:0      2:0 
     2        3:0      2:0 
     3        0:0      0:1 


   Reconhecedor de sequências múltiplas (1101101), com interseção:

   Diagrama de estados


   entrada saída        ------------ <--------------
        0:0             |           1:0            | 1:1
        ---             |           ---            |
        | |             |           | |            |
        V |    1:0      V    1:0    V |    0:0     |
       estado  --->  estado  --->  estado  --->  estado
       inicial         (1)          (2)           (3)
        ^               |                          |
        |               |                          |
        -------- <------------------ <--------------
        0:0           0:0                        0:0

   entrada: 000111011011001101000
   saída  : 000000010010000001000

   Tabela de estados
  
   Estado   Próximo / Saída
   Atual       0        1  
     0        0:0      1:0 
     1        0:0      2:0 
     2        3:0      2:0 
     3        0:0      1:1 

3. Moore (resposta dependente do estado)

   Exemplo:

   Reconhecedor de sequências múltiplas (1101_1101), sem interseção:

   Diagrama de estados

   entrada
        0                           1
       ---                         ---
       | |                         | |
       V |     1             1     V |     0             1
      estado  --->  estado  --->  estado  --->  estado  ---> estado
   (inicial,0)      (1, 0)        (2, 0)        (3, 0)       (4, 1)
       ^    saída                   |             |          |    |
       |                            |             |          |    |
       ------------------------------ <------------ <--------- <---
       0                                         0          0     1

   entrada: 000111011011001011000
   saída  : 000000001000000000100
                  ^^
                  ||_ atraso

   OBS.: Notar que a detecção ocorrerá no instante seguinte à entrada,
         quando tiver sido concluída a transição para o próximo estado.

   Tabela de estados
  
   Estado    Saída / Próximo
   Atual       0        1   
     0        0,0      0,1  
     1        0,0      0,2  
     2        0,3      0,2  
     3        0,0      0,4  
     4        0,0      1,0  
   
   Reconhecedor de sequências múltiplas (1101101), com interseção:

   Diagrama de estados
                                                               1
                      ------------- <---------------------------
        0             |             1                          |
       ---            |            ---                         |
       | |            |            | |                         |
       V |     1      V      1     V |     0             1     |
      estado  --->  estado  --->  estado  --->  estado  ---> estado
   (inicial,0)      (1, 0)        (2, 0)        (3, 0)       (4, 1)
       ^                            |             |            |
       |                            |             |            |
       --------------- <------------- <------------ <-----------
       0                                         0            0

   entrada: 000111011011001011000
   saída  : 000000001000100000100

   Tabela de estados
  
   Estado    Saída / Próximo
   Atual       0        1   
     0        0,0      0,1  
     1        0,0      0,2  
     2        0,3      0,2  
     3        0,0      0,4  
     4        0,0      1,1  


4. Pushdown Automata

   O modelo de pilha irá comparar a entrada com o topo da pilha,
   dependendo do resultado, guardará a saída no topo da pilha e 
   proseguirá para o próximo estado, se existir, enquanto houver dados.
   A pilha poderá ficar vazia (#).

   Exemplo:

   Reconhecedor de sequências múltiplas (1101_1101), sem interseção:

   Diagrama de estados

   (entrada,topo):saída
      (0,#):#                         (1,0):0                            
        ---                             ---                              
        | |                             | |                              
        V |   (1,#):0        (1,0):0    V | (0,0):0        (1,0):1       
       estado  ---->  estado  ---->  estado  ---->  estado  ---->  estado
       inicial <----    (1)            (2)            (3)            (4)  
        ^     (0,0):#  |   ^                           |              |   
        |              |   |                           |              |   
        -------- <---------|-------- <------------------              |   
        (0,0):#   (0,0):#  |                (0,0):#                   |   
        ^                  -------------------------------------------|   
        |                                                  (1,1,0)    |   
        ---------------------------------------------------------------   
                                                           (0,1):#       

   entrada:  000111011011001101000
   saída  : ####000010#00000001###
            ^
            |
   topo ---- 
  

   Exemplo:

   Reconhecedor de sequências múltiplas (1101_1101), com interseção:

   Diagrama de estados

   (entrada,topo):saída
      (0,#):#                         (1,0):0                            
        ---                             ---                              
        | |                             | |                              
        V |   (1,#):0        (1,0):0    V | (0,0):0        (1,0):1       
       estado  ---->  estado  ---->  estado  ---->  estado  ---->  estado
       inicial <----    (1)            (2)            (3)            (4)  
        ^     (0,0):#  |                ^              |              |   
        |              |                |              |              |   
        -------- <------------------ <--|---------------              |   
        (0,0):#   (0,0):#               |   (0,0):#                   |   
        ^                               ------------------------------|   
        |                                                  (1,1,0)    |   
        ---------------------------------------------------------------   
                                                           (0,1):#       

   entrada:  000111011011001101000
   saída  : ####000010010##0001###
            ^
            |
   topo ---- 


5. Máquina de Turing

        _ cabeça de leitura
       |
       v
   ----------------------------------- <- fita
   >###00011101101100101100##########< <- alfabeto {0,1,#}
   -----------------------------------
   ^  andar para     andar para      ^
   |_ a  direita (R) a esquerda (L) _| // ou parar (S)

   Modelo de regra:

   ( regra, estado atual, próximo estado, entrada, saída, ação )
   ^
   |_ (tupla = estrutura de dados descritiva)

   OBS.: O símbolo '#' indica a ausência de outros símbolos.


   Exemplo:

   Complemento de 1 - Regras:

   (0, 0,0,0,1,R)
   (1, 0,0,1,0,R)
   (2, 0,1,#,#,S)

             V
   início : #0110# (0, estado = 0, entrada = 0, saída = 1, ação = direita )
              V
            #1110# (1, estado = 0, entrada = 1, saida = 0, ação = direita )
               V
            #1010# (1, estado = 0, entrada = 1, saida = 0, ação = direita )
                V
            #1000# (0, estado = 0, entrada = 0, saida = 1, ação = direita )
                 V
   fim:     #1001# (2, estado = 0, entrada = #, saida = #, ação = parar   )


   Diagrama de estados

   entrada saída
        0:1
        ---
        | |
        V |    #:#
       estado  --->  estado
       inicial       final
        ^ |
        | |
        ---
        1:0

_________________________________


Aplicações particulares de pilhas

Notações para expressões

1. Infixa
   2+3+5     ->  ((2+3)+5 )   
                 ( 2+(3+5))   
2. Prefixa                    
   ++235     ->  (+,(+,2,3),5)
                           
3. Posfixa (parênteses desnecessários)                    
   23+5+     ->  ((2,3,+),5,+)
   235++     ->  (2,(3,5,+),+)
                           
   2*3+5                      
   23*5+     ->  ((2,3,*),5,+)
   2+3*5                      
   235*+     ->  (2,(3,5,*),+)


Avaliação/conversão de expressões

_________________________________

Operadores com prioridades iguais

       2+3+5         <- expressão

   ___       ___     <- pilhas vazias
operandos operadores

         2           <- entrada
   ___       ___

         +           <- entrada
    2    
   ___       ___

         3           <- entrada
    2         + 
   ___       ___

         +           <- entrada
    3
    2         +
   ___       ___

         +           <- entrada
    5    
   ___       ___

         5           <- entrada
    5         +
   ___       ___

         #           <- fim da entrada
    5
    5         +
   ___       ___

         #           <- fim da entrada
   10                <- resultado
   ___       ___


_____________________________________

Operadores com prioridades diferentes

       2+3*5

   ___       ___    <- pilhas vazias

         2           <- entrada
   ___       ___

         +           <- entrada
    2    
   ___       ___

         3           <- entrada
    2         +
   ___       ___

         *           <- entrada
    3
    2         +
   ___       ___

         5           <- entrada
    3         *
    2         +
   ___       ___

         #           <- fim da entrada
    5
    3         *
    2         +
   ___       ___

         #           <- entrada
   15    
    2         +
   ___       ___

         #           <- entrada
   17                <- resultado
   ___       ___



